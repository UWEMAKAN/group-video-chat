{"version":3,"sources":["components/CreateRoom/CreateRoom.module.css","containers/Window/Window.module.css","containers/QuadruplePeersView/QuadruplePeersView.module.css","components/Video/Video.module.css","components/CreateRoom/CreateRoom.js","components/Video/Video.js","containers/QuadruplePeersView/QuadruplePeersView.js","containers/Window/Window.js","containers/ChatRoom/ChatRoom.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CreateRoom","props","className","classes","Button","onClick","id","uuid","history","push","Video","ref","videoRef","autoPlay","playsInline","QuadruplePeersView","localVideo","remoteVideos","videos","length","map","remoteVideo","index","Quadruple","Window","ChatRoom","state","localStream","remoteStreams","offers","token","onMediaStream","stream","setState","prevState","current","srcObject","volume","socket","emit","roomId","on","onToken","onOffer","onAllUsers","onNewUser","onAnswer","answer","console","log","response","JSON","parse","rtcSession","RTCSessionDescription","peerConnections","filter","p","peerConnection","setRemoteDescription","connectionStatuses","localICECandidates","candidate","stringify","offer","offering","createAnswer","onCandidate","setLocalDescription","err","createOffer","peer","userId","users","forEach","user","peers","createPeerConnection","rtcConnection","createConnection","addStreamToPeerConnection","addEventListenersToPeerConnection","RTCPeerConnection","iceServers","addStream","onaddstream","event","createRef","key","remoteStream","onicecandidate","receivedCandidate","rtcCandidate","RTCIceCandidate","addIceCandidate","remoteVideo1","remoteVideo2","remoteVideo3","match","params","roomID","this","io","connect","navigator","mediaDevices","getUserMedia","video","height","window","innerHeight","width","innerWidth","audio","then","catch","alert","keys","Component","App","path","process","exact","component","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.046fe17c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"CreateRoom\":\"CreateRoom_CreateRoom__19d9W\",\"Button\":\"CreateRoom_Button__3_plR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Window\":\"Window_Window__25YSi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Quadruple\":\"QuadruplePeersView_Quadruple__33wNV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Video\":\"Video_Video__b-Hlw\"};","import React from 'react';\nimport { v1 as uuid } from 'uuid';\nimport classes from './CreateRoom.module.css';\n\nconst CreateRoom = (props) => {\n  const create = () => {\n    const id = uuid();\n    props.history.push(`/rooms/${id}`);\n  }\n\n  return (\n    <div className={classes.CreateRoom}>\n      <button className={classes.Button} onClick={create}>Create room</button>\n    </div>\n  );\n};\n\nexport default CreateRoom;\n","import React from 'react';\nimport classes from './Video.module.css';\n\nconst Video = (props) => {\n  return <video className={classes.Video} ref={props.videoRef} autoPlay playsInline></video>;\n};\n\nexport default Video;\n","import React from 'react';\nimport classes from './QuadruplePeersView.module.css';\nimport Video from '../../components/Video/Video';\n\nconst QuadruplePeersView = (props) => {\n  const { localVideo, remoteVideos } = props;\n  const videos = remoteVideos.length\n    ? remoteVideos.map((remoteVideo, index) =>   <Video videoRef={remoteVideo} />)\n    : null;\n  return (\n    <div className={classes.Quadruple}>\n      <Video videoRef={localVideo} />\n      {videos}\n    </div>\n  );\n}\n\nexport default QuadruplePeersView;\n","import React from 'react';\n// import Footer from '../../components/Common/Footer/Footer';\nimport classes from './Window.module.css';\nimport QuadruplePeersView from '../QuadruplePeersView/QuadruplePeersView';\n\nconst Window = (props) => {\n  return (\n    <div className={classes.Window}>\n      <QuadruplePeersView\n        {...props}\n      />\n      {/* <Footer /> */}\n    </div>\n  );\n};\n\nexport default Window;\n","import React, { Component, createRef } from 'react';\nimport io from 'socket.io-client';\nimport Window from '../Window/Window';\n\nclass ChatRoom extends Component {\n  constructor(props) {\n    super(props);\n    this.localVideo = createRef();\n    this.remoteVideos = createRef([]);\n    this.remoteVideo1 = createRef();\n    this.remoteVideo1.current = {};\n    this.remoteVideo2 = createRef();\n    this.remoteVideo2.current = {};\n    this.remoteVideo3 = createRef();\n    this.remoteVideo3.current = {};\n    this.socket = createRef();\n    this.peers = createRef([]);\n    this.peerConnections = createRef([]);\n    this.localICECandidates = createRef({});\n    this.connectionStatuses = createRef({});\n    this.roomId = props.match.params.roomID;\n  }\n\n  state = {\n    localStream: null,\n    remoteStreams: [],\n    offers: [],\n    token: null\n  };\n\n  componentDidMount() {\n    this.peers.current = [];\n    this.peerConnections.current = [];\n    this.remoteVideos.current = [];\n    this.connectionStatuses.current = {};\n    this.localICECandidates.current = {};\n    this.socket.current = io.connect('https://signals-server.herokuapp.com');\n    // this.socket.current = io.connect('http://localhost:8000');\n    navigator.mediaDevices\n      .getUserMedia({\n        video: {\n          height: window.innerHeight / 2,\n          width: window.innerWidth / 2\n        },\n        audio: true\n      })\n      .then((stream) => {\n        this.onMediaStream(stream);\n      })\n      .catch((err) => {\n        alert('Your browser does not support WebRTC');\n      });\n  }\n\n  onMediaStream = (stream) => {\n    this.setState((prevState) => ({\n      ...prevState,\n      localStream: stream\n    }));\n    this.localVideo.current.srcObject = stream;\n    this.localVideo.current.volume = 0;\n    this.socket.current.emit('join room', this.roomId);\n    this.socket.current.on('token', this.onToken);\n    this.socket.current.on('offer', this.onOffer);\n    this.socket.current.on('all users', this.onAllUsers);\n    this.socket.current.on('new user', this.onNewUser);\n    this.socket.current.on('answer', this.onAnswer);\n  };\n\n  onAnswer = (answer) => {\n    console.log('answer received');\n    const response = JSON.parse(answer);\n    console.log(response);\n    const rtcSession = new RTCSessionDescription(response.answer);\n    const { peerConnection } = this.peerConnections.current.filter((p) => p.id === response.id)[0];\n    peerConnection.setRemoteDescription(rtcSession);\n    this.connectionStatuses.current[response.id] = true;\n    console.log('local ICE Candidates', this.localICECandidates.current);\n    let candidate = this.localICECandidates.current[response.id];\n    console.log('logging candidate', candidate);\n    this.socket.current.emit('candidate', JSON.stringify({ id: response.id, candidate }));\n    console.log('candidate emitted');\n  };\n\n  onOffer = (offer) => {\n    console.log('offer received');\n    const offering = JSON.parse(offer);\n    console.log(offering);\n    console.log(this.peerConnections.current.filter((p) => p.id === offering.id));\n    this.createAnswer(offering)();\n  };\n\n  onToken = (token) => {\n    this.setState((prevState) => ({\n      ...prevState,\n      token\n    }));\n    this.socket.current.on('candidate', this.onCandidate);\n  };\n\n  createAnswer = (offering) => () => {\n    console.log('creating answer');\n    this.connectionStatuses.current[offering.id] = true;\n    const rtcSession = new RTCSessionDescription(offering.offer);\n    console.log('rtcSesstionDescription ', rtcSession);\n    const { peerConnection } = this.peerConnections.current.filter((p) => p.id === offering.id)[0];\n    peerConnection.setRemoteDescription(rtcSession);\n    peerConnection.createAnswer(\n      (answer) => {\n        console.log('answer created', answer);\n        peerConnection.setLocalDescription(answer);\n        console.log('local description set');\n        const response = { id: offering.id, answer };\n        this.socket.current.emit('answer', JSON.stringify(response));\n        console.log('answer emitted');\n      },\n      (err) => {\n        console.log(err);\n      }\n    );\n  };\n\n  createOffer = (peerConnection, peer) => {\n    peerConnection.createOffer(\n      (offer) => {\n        peerConnection.setLocalDescription(offer);\n        const offering = { id: peer.userId, offer };\n        this.socket.current.emit('offer', JSON.stringify(offering));\n        console.log('offer emitted');\n      },\n      (err) => {\n        console.log(err);\n      }\n    );\n  };\n\n  onAllUsers = (users) => {\n    users.forEach((user) => {\n      this.peers.current.push({ userId: user });\n      this.connectionStatuses.current[user] = false;\n    });\n    if (this.peers.current.length > 0) {\n      this.peers.current.forEach((peer) => {\n        const peerConnection = this.createPeerConnection(peer);\n        this.createOffer(peerConnection, peer);\n        console.log('offer created');\n        this.peerConnections.current.push({ id: peer.userId, peerConnection });\n      });\n      console.log('all users peerConnections updated');\n    }\n  };\n\n  onNewUser = (user) => {\n    console.log('new user');\n    const peer = { userId: user };\n    this.peers.current.push(peer);\n    this.connectionStatuses.current[user] = false;\n    const peerConnection = this.createPeerConnection(peer);\n    this.peerConnections.current.push({ id: peer.userId, peerConnection });\n    console.log('new user peerConnections updated');\n  };\n\n  createPeerConnection = (peer) => {\n    const rtcConnection = this.createConnection();\n    const peerConnection = this.addStreamToPeerConnection(rtcConnection);\n    const connection = this.addEventListenersToPeerConnection(peerConnection, peer);\n    return connection;\n  };\n\n  createConnection = () => {\n    const peerConnection = new RTCPeerConnection({\n      iceServers: this.state.token.iceServers\n    });\n    return peerConnection;\n  };\n\n  addStreamToPeerConnection = (peerConnection) => {\n    peerConnection.addStream(this.state.localStream);\n    return peerConnection;\n  };\n\n  addEventListenersToPeerConnection = (peerConnection, peer) => {\n    peerConnection.onaddstream = (event) => {\n      let remoteVideo = createRef();\n      remoteVideo.current = {};\n      remoteVideo.current.srcObject = event.stream;\n      this.remoteVideos.current.push({ id: peer.userId, remoteVideo });\n      this.setState((prevState) => ({\n        ...prevState,\n        remoteStreams: [...prevState.remoteStreams, { key: peer.userId, remoteStream: event.stream }]\n      }));\n      console.log('remote videos updated');\n    };\n    peerConnection.onicecandidate = (event) => {\n      if (event.candidate) {\n        const candidate = { id: peer.userId, candidate: event.candidate };\n        const connected = this.connectionStatuses.current[peer.userId];\n        if (connected) {\n          this.socket.current.emit('candidate', JSON.stringify(candidate));\n          console.log('candidate emitted');\n        } else {\n          this.localICECandidates.current[peer.userId] = candidate.candidate;\n        }\n      }\n    };\n    return peerConnection;\n  };\n\n  onCandidate = (candidate) => {\n    console.log('candidate received');\n    const receivedCandidate = JSON.parse(candidate);\n    console.log(receivedCandidate);\n    const rtcCandidate = new RTCIceCandidate(receivedCandidate.candidate);\n    console.log('rtcCandidate', rtcCandidate);\n    const { peerConnection } = this.peerConnections.current.filter((p) => receivedCandidate.id === p.id)[0];\n    peerConnection.addIceCandidate(rtcCandidate);\n    console.log(this.remoteVideos.current);\n  };\n\n  render() {\n    const { remoteStreams } = this.state;\n    const length = remoteStreams.length;\n    let keys = [];\n    if (length) {\n      if (length === 1) {\n        this.remoteVideo1.current.srcObject = remoteStreams[0].remoteStream;\n        keys.push(remoteStreams[0].key);\n      } else if (length === 2) {\n        this.remoteVideo1.current.srcObject = remoteStreams[0].remoteStream;\n        this.remoteVideo2.current.srcObject = remoteStreams[1].remoteStream;\n        keys.push(remoteStreams[0].key);\n        keys.push(remoteStreams[1].key);\n      } else if (length === 3) {\n        this.remoteVideo1.current.srcObject = remoteStreams[0].remoteStream;\n        this.remoteVideo2.current.srcObject = remoteStreams[1].remoteStream;\n        this.remoteVideo3.current.srcObject = remoteStreams[2].remoteStream;\n        keys.push(remoteStreams[0].key);\n        keys.push(remoteStreams[1].key);\n        keys.push(remoteStreams[2].key);\n      }\n    }\n\n    return (\n      <Window\n        localVideo={this.localVideo}\n        keys={keys}\n        remoteVideos={[this.remoteVideo1, this.remoteVideo2, this.remoteVideo3]}\n      />\n    );\n  }\n}\n\nexport default ChatRoom;\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport CreateRoom from './components/CreateRoom/CreateRoom';\nimport ChatRoom from './containers/ChatRoom/ChatRoom';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path={process.env.PUBLIC_URL + '/'} exact component={CreateRoom} />\n        <Route path={process.env.PUBLIC_URL + '/rooms/:roomID'} component={ChatRoom} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}